name: Build packages
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

env:
  CFLAGS: "-O2 -march=znver1 -mtune=znver1 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection"

jobs:
  list:
    runs-on: ubuntu-latest
    outputs:
      pkgs: ${{ steps.set-pkgs.outputs.pkgs }}
    steps:
      - uses: actions/checkout@v3
      - id: set-pkgs
        run: |
          echo "pkgs=$(ls -d pkgs/*/ | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        shell: bash

  build:
    needs:
     - list
    name: Build package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        package: ${{ fromJson(needs.list.outputs.pkgs) }}
    container: archlinux:base-devel

    steps:
      - uses: actions/checkout@v3
      - name: Create build user
        run: |
          useradd -m build
          mkdir -p /home/build/pkgs
          cp -vR ${{ matrix.package }} /home/build/pkgs
          chown -vR build /home/build/${{ matrix.package }}
      - name: Set up pacman keyring
        run: |
          pacman-key --init
          pacman-key --populate archlinux
          mkdir -p /etc/gnupg && echo "auto-key-retrieve" >> /etc/gnupg/gpg.conf
          sed -i '/ParallelDownloads/s/^#//g' /etc/pacman.conf
          echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist\n" >> /etc/pacman.conf
      - name: Generate .SRCINFO
        run: |
          su build bash -c "cd /home/build/${{ matrix.package }} && makepkg --printsrcinfo > /home/build/${{ matrix.package }}.SRCINFO"
      - name: Install dependencies
        shell: bash
        run: |
          pacman -Syu --noconfirm $(sed -n -e 's/^[[:space:]]*\(make\)\?depends\(_x86_64\)\? = \([[:alnum:][:punct:]]*\)[[:space:]]*$/\3/p' /home/build/${{ matrix.package }}/.SRCINFO)
      - name: Build package
        id: build-package
        shell: bash
        run: |
          su build bash -c "cd /home/build/${{ matrix.package }} && CFLAGS='${{ env.CFLAGS }}' MAKEFLAGS=-j$(nproc) makepkg"
      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: |
            /home/build/${{ matrix.package }}/*.pkg.tar.zst
          if-no-files-found: error

  make-release:
    runs-on: ubuntu-latest
    needs: 
      - list
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: /tmp
      - uses: actions/checkout@v3
      - name: Create package list
        run:
          cd pkgs/ && ls -d * > /tmp/packages.txt
      - name: Make release
        uses: softprops/action-gh-release@v1
        with:
          name: "linux-chimeraos-${{ needs.build-kernel.outputs.full_version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          fail_on_unmatched_files: true
          files: |
            /tmp/*.pkg.tar.zst
            /tmp/packages.txt
